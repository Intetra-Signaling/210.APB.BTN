// SPDX-FileCopyrightText: 2024 Cesanta Software Limited
// SPDX-License-Identifier: GPL-2.0-only or commercial
// Generated by Mongoose Wizard, https://mongoose.ws/wizard/

#ifndef MONGOOSE_GLUE_H
#define MONGOOSE_GLUE_H

#ifdef __cplusplus
extern "C" {
#endif

#include "mongoose.h"
extern volatile bool web_client_connected;
extern bool TestMode;
extern struct wifiSettings s_wifiSettings;

#define WIZARD_ENABLE_HTTP 1
#define WIZARD_ENABLE_HTTPS 0
#define WIZARD_ENABLE_HTTP_UI 1
#define WIZARD_ENABLE_HTTP_UI_LOGIN 1

#define WIZARD_ENABLE_WEBSOCKET 1

#define WIZARD_ENABLE_MQTT 0
#define WIZARD_MQTT_URL ""

#define WIZARD_ENABLE_SNTP 0  // Enable time sync.
#define WIZARD_SNTP_TYPE 0    // 0: default Google, 1: DHCP, 2: custom
#define WIZARD_SNTP_URL "udp://time.google.com:123"  // Custom SNTP server URL
#define WIZARD_SNTP_INTERVAL_SECONDS 3600            // Frequency of SNTP syncs

#define WIZARD_DNS_TYPE 0  // 0: default Google, 1: DHCP, 2: custom
#define WIZARD_DNS_URL "udp://8.8.8.8:53"  // Custom DNS server URL
#define WIZARD_CAPTIVE_PORTAL 0
#define WIZARD_ENABLE_MDNS 0
#define WIZARD_MDNS_NAME ""

#define WIZARD_ENABLE_MODBUS 0
#define WIZARD_MODBUS_PORT 502

#ifndef WIZARD_REBOOT_TIMEOUT_MS
#define WIZARD_REBOOT_TIMEOUT_MS 500
#endif

void mongoose_init(void);    // Initialise Mongoose
void mongoose_poll(void);    // Poll Mongoose
extern struct mg_mgr g_mgr;  // Mongoose event manager

void mongoose_set_http_handlers(const char *name, ...);
void mongoose_add_ws_handler(unsigned ms, void (*)(struct mg_connection *));

struct mongoose_mqtt_handlers {
  struct mg_connection *(*connect_fn)(mg_event_handler_t);
  void (*on_connect_fn)(struct mg_connection *, int);
  void (*on_message_fn)(struct mg_connection *, struct mg_str, struct mg_str);
  void (*on_cmd_fn)(struct mg_connection *, struct mg_mqtt_message *);
};
void mongoose_set_mqtt_handlers(struct mongoose_mqtt_handlers *);

struct mongoose_modbus_handlers {
  bool (*read_reg_fn)(uint16_t address, uint16_t *value);
  bool (*write_reg_fn)(uint16_t address, uint16_t value);
};
void mongoose_set_modbus_handlers(struct mongoose_modbus_handlers *);

void mongoose_set_sntp_handler(void (*fn)(uint64_t epoch_ms));
void mongoose_set_sntp_server(const char *url);

void mongoose_set_auth_handler(int (*fn)(const char *user, const char *pass));

#if WIZARD_ENABLE_MQTT
void glue_lock_init(void);  // Initialise global Mongoose mutex
void glue_lock(void);       // Lock global Mongoose mutex
void glue_unlock(void);     // Unlock global Mongoose mutex
#else
#define glue_lock_init()
#define glue_lock()
#define glue_unlock()
#endif

// Update MDNS name. Works when MDNS is enabled.
void glue_mdns_update_name(const char *newname);

// Increment device change state counter - trigger UI refresh
void glue_update_state(void);

// Firmware Glue


int    glue_authenticate(const char *user, const char *pass);


void glue_start_reboot(struct mg_str);  // Start an action
bool glue_check_reboot(void);  // Check if action is still in progress

void glue_start_reformat(struct mg_str);  // Start an action
bool glue_check_reformat(void);  // Check if action is still in progress

void *glue_upload_open_file_upload(char *file_name, size_t total_size);
bool glue_upload_close_file_upload(void *context);
bool glue_upload_write_file_upload(void *context, void *buf, size_t len);

struct deleteFile {
  char fileName[50];
};
void glue_get_deleteFile(struct deleteFile *);
void glue_set_deleteFile(struct deleteFile *);

struct state {
  int speed;
  int temperature;
  int humidity;
  int uptime;
  char version[20];
  bool online;
  bool lights;
  int level;
};
void glue_get_state(struct state *);

void glue_reply_loglevels(struct mg_connection *, struct mg_http_message *);
void glue_reply_events(struct mg_connection *, struct mg_http_message *);
void glue_reply_download(struct mg_connection *, struct mg_http_message *);
struct sunday {
  char time[97];
};
void glue_get_sunday(struct sunday *);
void glue_set_sunday(struct sunday *);

struct monday {
  char time[97];
};
void glue_get_monday(struct monday *);
void glue_set_monday(struct monday *);

struct tuesday {
  char time[97];
};
void glue_get_tuesday(struct tuesday *);
void glue_set_tuesday(struct tuesday *);

struct wednesday {
  char time[97];
};
void glue_get_wednesday(struct wednesday *);
void glue_set_wednesday(struct wednesday *);

struct thursday {
  char time[97];
};
void glue_get_thursday(struct thursday *);
void glue_set_thursday(struct thursday *);

struct friday {
  char time[97];
};
void glue_get_friday(struct friday *);
void glue_set_friday(struct friday *);

struct saturday {
  char time[97];
};
void glue_get_saturday(struct saturday *);
void glue_set_saturday(struct saturday *);

struct holidays {
  char holiday1[105];
  char holiday2[105];
  char holiday3[105];
  char holiday4[105];
  char holiday5[105];
  char holiday6[105];
  char holiday7[105];
  char holiday8[105];
  char holiday9[105];
  char holiday10[105];
};
void glue_get_holidays(struct holidays *);
void glue_set_holidays(struct holidays *);

struct network_settings {
  char ip_address[20];
  char gw_address[20];
  char netmask[20];
  bool dhcp;
};
void glue_get_network_settings(struct network_settings *);
void glue_set_network_settings(struct network_settings *);

void *glue_ota_begin_firmware_update(char *file_name, size_t total_size);
bool glue_ota_end_firmware_update(void *context);
bool glue_ota_write_firmware_update(void *context, void *buf, size_t len);

struct reset {
  bool reset;
};
void glue_get_reset(struct reset *);
void glue_set_reset(struct reset *);

struct security {
  char userName[10];
  char password[10];
};
void glue_get_security(struct security *);
void glue_set_security(struct security *);

struct clock_settings {
  bool useSNTP;
  char sntpServer[16];
  int sntpRefreshInterval;
  char timeZoneOffset[10];
  bool syncWithPC;
  char manualTime[19];
  bool daylightSavingEnabled;
};
void glue_get_clock_settings(struct clock_settings *);
void glue_set_clock_settings(struct clock_settings *);

struct systemInfo {
  char deviceName[50];
  char deviceComment[50];
  char softwareVersion[50];
};
void glue_get_systemInfo(struct systemInfo *);
void glue_set_systemInfo(struct systemInfo *);

struct wifiSettings {
  char ssid[50];
};
void glue_get_wifiSettings(struct wifiSettings *);
void glue_set_wifiSettings(struct wifiSettings *);

struct defaultConfiguration {
  bool isIdleActive;
  char idleSound[50];
  int idleMinVolume;
  int idleMaxVolume;
  bool idleContAfterReq;
  bool isReqActive;
  char reqSound1[50];
  char reqSound2[50];
  int reqPlayPeriod;
  int reqMinVolume;
  int reqMaxVolume;
  bool isGreenActive;
  char greenSound[50];
  int greenMinVolume;
  int greenMaxVolume;
  int greenCountFrom;
  int greenCountTo;
  char greenAction[50];
};
void glue_get_defaultConfiguration(struct defaultConfiguration *);
void glue_set_defaultConfiguration(struct defaultConfiguration *);

struct alt1Configuration {
  bool isIdleActive;
  char idleSound[50];
  int idleMinVolume;
  int idleMaxVolume;
  bool idleContAfterReq;
  bool isReqActive;
  char reqSound1[50];
  char reqSound2[50];
  int reqPlayPeriod;
  int reqMinVolume;
  int reqMaxVolume;
  bool isGreenActive;
  char greenSound[50];
  int greenMinVolume;
  int greenMaxVolume;
  int greenCountFrom;
  int greenCountTo;
  char greenAction[50];
};
void glue_get_alt1Configuration(struct alt1Configuration *);
void glue_set_alt1Configuration(struct alt1Configuration *);

struct alt2Configuration {
  bool isIdleActive;
  char idleSound[50];
  int idleMinVolume;
  int idleMaxVolume;
  bool idleContAfterReq;
  bool isReqActive;
  char reqSound1[50];
  char reqSound2[50];
  int reqPlayPeriod;
  int reqMinVolume;
  int reqMaxVolume;
  bool isGreenActive;
  char greenSound[50];
  int greenMinVolume;
  int greenMaxVolume;
  int greenCountFrom;
  int greenCountTo;
  char greenAction[50];
};
void glue_get_alt2Configuration(struct alt2Configuration *);
void glue_set_alt2Configuration(struct alt2Configuration *);

struct alt3Configuration {
  bool isIdleActive;
  char idleSound[50];
  int idleMinVolume;
  int idleMaxVolume;
  bool idleContAfterReq;
  bool isReqActive;
  char reqSound1[50];
  char reqSound2[50];
  int reqPlayPeriod;
  int reqMinVolume;
  int reqMaxVolume;
  bool isGreenActive;
  char greenSound[50];
  int greenMinVolume;
  int greenMaxVolume;
  int greenCountFrom;
  int greenCountTo;
  char greenAction[50];
};
void glue_get_alt3Configuration(struct alt3Configuration *);
void glue_set_alt3Configuration(struct alt3Configuration *);

void glue_reply_directory(struct mg_connection *, struct mg_http_message *);
struct playSound {
  char fileName[50];
  int soundLevel;
};
void glue_get_playSound(struct playSound *);
void glue_set_playSound(struct playSound *);

struct audioConfig {
  char sound30[50];
  char sound29[50];
  char sound28[50];
  char sound27[50];
  char sound26[50];
  char sound25[50];
  char sound24[50];
  char sound23[50];
  char sound22[50];
  char sound21[50];
  char sound20[50];
  char sound19[50];
  char sound18[50];
  char sound17[50];
  char sound16[50];
  char sound15[50];
  char sound14[50];
  char sound13[50];
  char sound12[50];
  char sound11[50];
  char sound10[50];
  char sound9[50];
  char sound8[50];
  char sound7[50];
  char sound6[50];
  char sound5[50];
  char sound4[50];
  char sound3[50];
  char sound2[50];
  char sound1[50];
};
void glue_get_audioConfig(struct audioConfig *);
void glue_set_audioConfig(struct audioConfig *);

struct currentTime {
  char date[20];
  char time[20];
};
void glue_get_currentTime(struct currentTime *);
void glue_set_currentTime(struct currentTime *);

void glue_reply_noiseLevel(struct mg_connection *, struct mg_http_message *);
struct volume {
  int volume;
};
void glue_get_volume(struct volume *);
void glue_set_volume(struct volume *);

struct deviceStatus {
  int buttonStatus;
  int redTime;
  int greenTime;
};
void glue_get_deviceStatus(struct deviceStatus *);
void glue_set_deviceStatus(struct deviceStatus *);

extern struct deviceStatus s_deviceStatus;
extern struct systemInfo s_systemInfo; 
extern struct wifiSettings s_wifiSettings;

extern struct defaultConfiguration s_defaultConfiguration;
extern struct alt1Configuration s_alt1Configuration;
extern struct alt2Configuration s_alt2Configuration; 
extern struct alt3Configuration s_alt3Configuration;
extern struct audioConfig s_audioConfig;

extern struct sunday s_sunday;
extern struct monday s_monday;
extern struct tuesday s_tuesday;
extern struct wednesday s_wednesday;
extern struct thursday s_thursday;
extern struct friday s_friday;
extern struct saturday s_saturday;
extern struct holidays s_holidays;
extern struct volume s_volume;
extern bool DefConfigFlashWrite;
extern bool Alt1ConfigFlashWrite;
extern bool Alt2ConfigFlashWrite;
extern bool Alt3ConfigFlashWrite;
extern struct playSound s_playSound;

struct configuration {
  bool isIdleActive;
  char idleSound[50];
  int idleMinVolume;
  int idleMaxVolume;
  bool idleContAfterReq;
  bool isReqActive;
  char reqSound1[50];
  char reqSound2[50];
  int reqPlayPeriod;
  int reqMinVolume;
  int reqMaxVolume;
  bool isGreenActive;
  char greenSound[50];
  int greenMinVolume;
  int greenMaxVolume;
  int greenCountFrom;
  int greenCountTo;
  char greenAction[50];
};



void glue_start_reset(struct mg_str);  // Start an action
bool glue_check_reset(void);  // Check if action is still in progress



#ifdef __cplusplus
}
#endif
#endif  // MONGOOSE_GLUE_H
